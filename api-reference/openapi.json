{
  "openapi": "3.1.0",
  "info": {
    "title": "Umified APIs",
    "description": "Umified APIs for access management, meeting information, transcription and bot management.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.umified.com/api/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/meeting_info": {
      "get": {
        "description": "Returns meeting information and recording file post meeting completion.",
        "parameters": [
          {
            "name": "session_id",
            "in": "query",
            "description": "The session ID of the meeting instance from create meeting api call.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeetingResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                },
                "example": {
                  "detail": "Invalid authentication. Could not decode token."
                }
              }
            }
          },
          "404": {
            "description": "Meeting Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                },
                "example": {
                  "message": "Meeting not found. Check Session ID.",
                  "status_code": 404,
                  "destination": null
                }
              }
            }
          }
        }
      }
    },
    "/transcription": {
      "get": {
        "description": "Returns the transcription - as a JSON dictionary (default) or as a TXT response (when token passed in query parameters).",
        "parameters": [
          {
            "name": "session_id",
            "in": "query",
            "description": "The session ID of the meeting instance from create meeting api call.",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "token",
            "in": "query",
            "description": "The authentication bearer token value - provide if you would like to download the whole transcription as a VTT file.",            
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response (either transcription list or status message)",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/TranscriptionResponse" }
                    },
                    { "$ref": "#/components/schemas/TranscriptionStatusResponse" }
                  ]
                },
                "examples": {
                  "transcriptionList": {
                    "summary": "Normal JSON transcription",
                    "value": [
                      {
                        "speech_no": 0,
                        "participant_name": "John Doe",
                        "speech_text": "The attendees are thereâ€¦"
                      }
                    ]
                  },
                  "processing": {
                    "summary": "Processing in progress",
                    "value": {
                      "message": "Audio processing is in progress. Please try again later.",
                      "status_code": 200,
                      "destination": null
                    }
                  },
                  "noRecording": {
                    "summary": "No recording available",
                    "value": {
                      "message": "Recording is not available for this meeting so no transcription available.",
                      "status_code": 200,
                      "destination": null
                    }
                  }
                }
              },
              "text/vtt": {
                "schema": {
                  "type": "string",
                  "example": "WEBVTT\n\n00:00:05.000 --> 00:00:40.000\n<v John Doe>The attendees are there or not. Great. Attendees are also there. Yeah, active speaker is also there. Great.\n\n00:00:41.000 --> 00:00:50.000\n<v Jane Smith>Okay."
                }
              }
            }
          },
          "403": {
            "description": "Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                },
                "example": {
                  "detail": "Invalid authentication. Could not decode token."
                }
              }
            }
          },
          "404": {
            "description": "Meeting Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                },
                "example": {
                  "message": "Meeting not found. Check Session ID.",
                  "status_code": 404,
                  "destination": null
                }
              }
            }
          }
        }
      }
    },
    "/add_bot/": {
      "post": {
        "description": "Creates a new bot",
        "requestBody": {
          "description": "Bot details in form-data. Both bot_name and bot_message are required.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "bot_name": {
                    "type": "string",
                    "description": "Name of the bot"
                  },
                  "bot_message": {
                    "type": "string",
                    "description": "Bot welcome message"
                  }
                },
                "required": [
                  "bot_name",
                  "bot_message"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bot response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BotResponse"
                }
              }
            }
          },
          "403": {
            "description": "Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                },
                "example": {
                  "detail": "Invalid authentication. Could not decode token."
                }
              }
            }
          }
        }
      }
    },
    "/update_bot/": {
      "put": {
        "description": "Updates an existing bot with new bot message",
        "requestBody": {
          "description": "Bot details in form-data. Both bot_name and bot_message are required.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "bot_name": {
                    "type": "string",
                    "description": "Name of the bot"
                  },
                  "bot_message": {
                    "type": "string",
                    "description": "New Bot welcome message"
                  }
                },
                "required": [
                  "bot_name",
                  "bot_message"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Bot response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBotResponse"
                },
                "example": {
                  "result": {
                    "bot_name": "Umified Bot",
                    "bot_message": "Hello!!"
                  },
                  "message": "Your Bot is updated successfully.",
                  "status_code": 200,
                  "destination": null
                }
              }
            }
          },
          "403": {
            "description": "Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                },
                "example": {
                  "detail": "Invalid authentication. Could not decode token."
                }
              }
            }
          }
        }
      }
    },
    "/create_meeting/": {
      "post": {
        "description": "Creates a Meeting",
        "requestBody": {
          "description": "Details in form-data.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "destination_path": {
                    "type": "string",
                    "description": "**_For Authorised Partners Only_**\n\n*Optional*. S3 destination for meeting transcript file upload (must end in `/`). \nE.g. `s3://bucket_name/` *or* `s3://bucket-name/folder-name/`.\nHere, `bucket_name` is the name of your S3 prod bucket. \n\nPost meeting, once transcription is completed, the transcript file will be uploaded to: \n`<destination_path>/<meeting-session-id>/meeting-transcript.txt`.",
                    "pattern": "^s3://notetaker-transcripts-prod-032265101474-eu-west-1(?:/[A-Za-z0-9!\\.\\_\\-\\*'\\(\\)]+)*/$"
                  },
                  "meeting_url": {
                    "type": "string",
                    "description": "Meeting URL - Google Meet, Zoom or Teams. \n\n**Note:** Teams meeting URL shall be in below format \n*https://teams.live.com/meet/{meeting-id}?p={passcode}*. \nExample:\r*https://teams.live.com/meet/0123456789123?p=Ab12aBa1*"
                  },
                  "meeting_name": {
                    "type": "string",
                    "description": "A Meeting name."
                  },
                  "start_datetime": {
                    "type": "string",
                    "format": "date-time",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+\\-]\\d{2}:\\d{2})$",
                    "description": "**Required for Scheduled Meeting.**\nStart datetime shall be strictly in ISO-8601 with timezone offset (+HH:MM).\nExamples:\n\t*2025-05-05T14:30:00.123456+05:30*,\n\t*2025-05-05T14:30:00+04:00*,\n\t*2025-05-05 14:30:00-05:00*.",
                    "examples": {
                      "UTC": {
                        "summary": "UTC Time",
                        "value": "2025-04-28T15:05:35.759770+00:00"
                      },
                      "IST": {
                        "summary": "IST Time",
                        "value": "2025-04-28T20:35:35.762760+05:30"
                      },
                      "UTC+1": {
                        "summary": "UTC+1 Time",
                        "value": "2025-04-28T16:05:35.759770+01:00"
                      }
                    }
                  },
                  "end_datetime": {
                    "type": "string",
                    "format": "date-time",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+\\-]\\d{2}:\\d{2})$",
                    "description": "**Required for Scheduled Meeting.**\nEnd datetime shall be strictly in ISO-8601 with timezone offset (+HH:MM).\nExamples:\n\t*2025-05-05T14:30:00.123456+05:30*,\n\t*2025-05-05T14:30:00+04:00*,\n\t*2025-05-05 14:30:00-05:00*.",
                    "examples": {
                      "UTC": {
                        "summary": "UTC Time",
                        "value": "2025-04-28T15:05:35.759770+00:00"
                      },
                      "IST": {
                        "summary": "IST Time",
                        "value": "2025-04-28T20:35:35.762760+05:30"
                      },
                      "UTC+1": {
                        "summary": "UTC+1 Time",
                        "value": "2025-04-28T16:05:35.759770+01:00"
                      }
                    }
                  },
                  "bot_name": {
                    "type": "string",
                    "description": "*OPTIONAL* - Custom name for the bot."
                  },
                  "client_code": {
                    "type": "string",
                    "description": "*OPTIONAL* - Client code for identifying the user",
                    "examples": {
                      "Umified": {
                        "summary": "Umified Client Code",
                        "value": "umified"
                      },
                      "ACME Corp.": {
                        "summary": "ACME Client Code",
                        "value": "acme"
                      }
                    }
                  }
                },
                "required": [
                  "meeting_url",
                  "meeting_name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMeetingResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          }
        }
      }
    },
    "/update_meeting/": {
      "put": {
        "description": "Updates a Scheduled Meeting",
        "requestBody": {
          "description": "Details in form-data.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "destination_path": {
                    "type": "string",
                    "description": "**_For Authorised Partners Only_**\n\n*Optional*. S3 destination for meeting transcript file upload (must end in `/`). \nE.g. `s3://bucket_name/` *or* `s3://bucket-name/folder-name/`.\nHere, `bucket_name` is the name of your S3 prod bucket. \n\nPost meeting, once transcription is completed, the transcript file will be uploaded to: \n`<destination_path>/<meeting-session-id>/meeting-transcript.txt`.",
                    "pattern": "^s3://notetaker-transcripts-prod-032265101474-eu-west-1(?:/[A-Za-z0-9!\\.\\_\\-\\*'\\(\\)]+)*/$"
                  },
                  "session_id": {
                    "type": "string",
                    "description": "The session ID of the meeting instance from create meeting api call."
                  },
                  "meeting_url": {
                    "type": "string",
                    "description": "OPTIONAL.\nProvide value if you want to update the meeting URL (supports **Google Meet**, **Zoom** or **Teams**)."
                  },
                  "meeting_name": {
                    "type": "string",
                    "description": "OPTIONAL.\nProvide value if you want to update the meeting name."
                  },
                  "start_datetime": {
                    "type": "string",
                    "format": "date-time",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+\\-]\\d{2}:\\d{2})$",
                    "description": "*OPTIONAL* - Required for Scheduled Meeting.\nStart datetime shall be strictly in ISO-8601 with timezone offset (+HH:MM).\nExamples:\n\t*2025-05-05T14:30:00.123456+05:30*,\n\t*2025-05-05T14:30:00+04:00*,\n\t*2025-05-05 14:30:00-05:00*.",
                    "examples": {
                      "UTC": {
                        "summary": "UTC Time",
                        "value": "2025-04-28T15:05:35.759770+00:00"
                      },
                      "IST": {
                        "summary": "IST Time",
                        "value": "2025-04-28T20:35:35.762760+05:30"
                      },
                      "UTC+1": {
                        "summary": "UTC+1 Time",
                        "value": "2025-04-28T16:05:35.759770+01:00"
                      }
                    }
                  },
                  "end_datetime": {
                    "type": "string",
                    "format": "date-time",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+\\-]\\d{2}:\\d{2})$",
                    "description": "*OPTIONAL* - Required for Scheduled Meeting.\nEnd datetime shall be strictly in ISO-8601 with timezone offset (+HH:MM).\nExamples:\n\t*2025-05-05T14:30:00.123456+05:30*,\n\t*2025-05-05T14:30:00+04:00*,\n\t*2025-05-05 14:30:00-05:00*.",
                    "examples": {
                      "UTC": {
                        "summary": "UTC Time",
                        "value": "2025-04-28T15:05:35.759770+00:00"
                      },
                      "IST": {
                        "summary": "IST Time",
                        "value": "2025-04-28T20:35:35.762760+05:30"
                      },
                      "UTC+1": {
                        "summary": "UTC+1 Time",
                        "value": "2025-04-28T16:05:35.759770+01:00"
                      }
                    }
                  },
                  "bot_name": {
                    "type": "string",
                    "description": "*OPTIONAL* - Custom name for the bot."
                  },
                  "invite_status": {
                    "type": "string",
                    "description": "*OPTIONAL* - Meeting status; Default (if not specified) is 'updated'. Pass 'cancelled' if you want to cancel the meeting.",
                    "enum": [
                      "updated",
                      "cancelled"
                    ],
                    "default": "updated"
                  }
                },
                "required": [
                  "session_id"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMeetingResponse"
                },
                "example": {
                  "result": {
                    "bot_name": "Client's Bot 1",
                    "meeting_url": "https://meet.google.com/abc-defg-hij (updated url)",
                    "meeting_name": "Client's Meeting 1-updated",
                    "start_datetime": "2025-05-08T11:07:00.762760+05:30",
                    "end_datetime": "2025-05-08T11:15:35.762760+05:30",
                    "session_id": "clientpdsc20250508153512066611",
                    "destination_path": "s3://bucket-name/folder-name/"
                  },
                  "message": "Your meeting is updated successfully.",
                  "status_code": 200,
                  "destination": null
                }
              }
            }
          },
          "400": {
            "description": "Bad Request Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          }
        }
      }
    },
    "/sign_in/": {
      "post": {
        "description": "Sign In to Umified",
        "security": [],
        "requestBody": {
          "description": "Credentials in form-data.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email for sign in"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for sign in"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/sign_up/": {
      "post": {
        "description": "Sign Up to Umified",
        "security": [],
        "requestBody": {
          "description": "Credentials in form-data.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email for sign up"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for sign up"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          }
        }
      }
    },
    "/delete_account/": {
      "delete": {
        "description": "Delete your umified account",
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        }
      }
    },
    "/calendar_oauth/": {
      "post": {
        "description": "OAuth2.0 for Calendar Access",
        "requestBody": {
          "description": "Authorization code, redirect URI and platform in form-data.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The authorization code received from the OAuth provider."
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "The redirect URI used in the OAuth flow."
                  },
                  "platform": {
                    "type": "string",
                    "description": "The calendar platform.",
                    "enum": [
                      "microsoft_outlook",
                      "google"
                    ]
                  }
                },
                "required": [
                  "code",
                  "redirect_uri",
                  "platform"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Calendar connected successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarOAuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                },
                "example": {
                  "message": "Authorization code from oauth, redirect URI, and platform are required.",
                  "status_code": 400,
                  "destination": null
                }
              }
            }
          },
          "403": {
            "description": "Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "MeetingResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "meeting_name": {
                "type": "string",
                "example": "Test Meeting 20250420 - 15 - Gmeet"
              },
              "start_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2025-04-20T17:01:08.864861Z"
              },
              "end_datetime": {
                "type": "string",
                "format": "date-time",
                "example": "2025-04-20T17:20:03.669030Z"
              },
              "duration": {
                "type": "string",
                "example": "1134.804169"
              },
              "executed": {
                "type": "boolean",
                "example": true
              },
              "attendees": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "attendee_name": {
                      "type": "string",
                      "example": "Heu AI"
                    }
                  },
                  "required": [
                    "attendee_name"
                  ]
                }
              },
              "recording_url": {
                "type": "string",
                "format": "uri",
                "example": "https://umified.blob.core.windows.net/meetings/umifiedpdin20250420123456789012.webm"
              }
            },
            "required": [
              "meeting_name",
              "start_datetime",
              "end_datetime",
              "duration",
              "executed",
              "attendees",
              "recording_url"
            ]
          },
          "message": {
            "type": "string",
            "example": "Got meeting info successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 200
          },
          "destination": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "example": null
          }
        },
        "required": [
          "result",
          "message",
          "status_code",
          "destination"
        ]
      },
      "CalendarOAuthResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "refresh_token": {
                "type": "string",
                "example": "QWERTYUIOPASDFGHJKLZXCVBNM123456"
              },
              "access_token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkFwcENsaWVudElEIn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
              },
              "oauth_client_id": {
                "type": "string",
                "example": "123e4567-e89b-12d3-a456-426614174000"
              },
              "redirect_uri": {
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "refresh_token",
              "access_token",
              "oauth_client_id",
              "redirect_uri"
            ]
          },
          "message": {
            "type": "string",
            "example": "Calendar connected successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 200
          },
          "destination": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "example": null
          }
        },
        "required": [
          "result",
          "message",
          "status_code",
          "destination"
        ]
      },
      "TranscriptionResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "speech_no": {
                  "type": "integer",
                  "example": 0
                },
                "participant_name": {
                  "type": "string",
                  "example": "John Doe"
                },
                "speech_text": {
                  "type": "string",
                  "example": "The attendees are there or not. Great. Attendees are also there. Yeah, active speaker is also there. Great."
                }
              },
              "required": [
                "speech_no",
                "participant_name",
                "speech_text"
              ]
            }
          },
          "message": {
            "type": "string",
            "example": "Your meeting transcription is fetched successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 200
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "result",
          "message",
          "status_code",
          "destination"
        ]
      },
      "TranscriptionStatusResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "status_code": {
            "type": "integer"
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ]
          }
        },
        "required": ["message","status_code","destination"]
      },
      "BotResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "bot_name": {
                "type": "string",
                "example": "Bot Name"
              },
              "bot_message": {
                "type": "string",
                "example": "Bot welcome message"
              }
            },
            "required": [
              "bot_name",
              "bot_message"
            ]
          },
          "message": {
            "type": "string",
            "example": "Your Bot is added successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 200
          },
          "destination": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "example": null
          }
        },
        "required": [
          "result",
          "message",
          "status_code",
          "destination"
        ]
      },
      "UpdateBotResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "bot_name": {
                "type": "string",
                "example": "Umified Bot"
              },
              "bot_message": {
                "type": "string",
                "example": "Hello!!"
              }
            },
            "required": [
              "bot_name",
              "bot_message"
            ]
          },
          "message": {
            "type": "string",
            "example": "Your Bot is updated successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 200
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "result",
          "message",
          "status_code",
          "destination"
        ]
      },
      "CreateMeetingResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "bot_name": {
                "type": "string",
                "example": "Umified Bot"
              },
              "session_id": {
                "type": "string",
                "example": "umifiedpdin20250422061939541365"
              }
            },
            "required": [
              "bot_name",
              "session_id"
            ]
          },
          "message": {
            "type": "string",
            "example": "Your meeting is created successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 201
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "result",
          "message",
          "status_code",
          "destination"
        ]
      },
      "UpdateMeetingResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "description": "Only the fields that were updated",
            "properties": {
              "meeting_url": {
                "type": "string",
                "format": "uri"
              },
              "meeting_name": {
                "type": "string"
              },
              "start_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "end_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "bot_name": {
                "type": "string"
              },
              "session_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "message": {
            "type": "string",
            "example": "Your meeting is updated successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 200
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "result",
          "message",
          "status_code",
          "destination"
        ]
      },
      "SignInResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "refresh_token": {
                "type": "string",
                "example": "<A long-lived token used to obtain new access tokens.>"
              },
              "access_token": {
                "type": "string",
                "example": "<The primary token (Firebase ID token) used to authenticate API requests and verify the user's identity.>"
              },
              "expires_in": {
                "type": "string",
                "example": "3600",
                "description": "The number of seconds until the access token expires."
              },
              "local_id": {
                "type": "string",
                "example": "<A unique identifier for the user in Firebase Authentication>"
              }
            },
            "required": [
              "refresh_token",
              "access_token",
              "expires_in",
              "local_id"
            ]
          },
          "message": {
            "type": "string",
            "example": "You are signed in successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 200
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "result",
          "message",
          "status_code",
          "destination"
        ]
      },
      "SignUpResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "refresh_token": {
                "type": "string",
                "example": "<A long-lived token used to obtain new access tokens.>"
              },
              "access_token": {
                "type": "string",
                "example": "<The primary token (Firebase ID token) used to authenticate API requests and verify the user's identity.>"
              },
              "expires_in": {
                "type": "string",
                "example": "3600",
                "description": "The number of seconds until the access token expires."
              },
              "local_id": {
                "type": "string",
                "example": "<A unique identifier for the user in Firebase Authentication>"
              }
            },
            "required": [
              "refresh_token",
              "access_token",
              "expires_in",
              "local_id"
            ]
          },
          "message": {
            "type": "string",
            "example": "You are registered successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 201
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "result",
          "message",
          "status_code",
          "destination"
        ]
      },
      "DeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Your account is deleted successfully."
          },
          "status_code": {
            "type": "integer",
            "example": 200
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "message",
          "status_code",
          "destination"
        ]
      },
      "APIError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Error Message"
          },
          "status_code": {
            "type": "integer",
            "enum": [400, 401, 403, 404, 500],
            "example": 400
          },
          "destination": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "example": null
          }
        },
        "required": [
          "message",
          "status_code",
          "destination"
        ]
      },
      "AuthError": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "example": "Invalid authentication. Could not decode token."
          }
        },
        "required": [
          "detail"
        ]
      },
      "BadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Meeting URL should be a valid Zoom, Google Meet, or Microsoft Teams URL."
          },
          "status_code": {
            "type": "integer",
            "example": 400
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "message",
          "status_code",
          "destination"
        ]
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "You are Unauthorized."
          },
          "status_code": {
            "type": "integer",
            "example": 401
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "message",
          "status_code",
          "destination"
        ]
      },
      "ConflictError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "You are already registered with this email. Please sign in."
          },
          "status_code": {
            "type": "integer",
            "example": 409
          },
          "destination": {
            "oneOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "example": null
          }
        },
        "required": [
          "message",
          "status_code",
          "destination"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}